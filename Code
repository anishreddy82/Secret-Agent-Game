#include <iostream>
#include <ctime>

// Just gives an introduction to the game. 
void PrintIntroduction(int Difficulty)
{
    std::cout <<"\n\nAgent you are a secret agent who needs to break into the level " << Difficulty;
    std::cout << " onion vault to get more onions for oger town 3000...\nYou need to enter the correct codes to get itno the onion vault...\n\n";
}

//This is where the 3 integers are created, and a gues is done. The guess is checked to make sure it is right, otherwise
// the game loops back through this function until the 3 digit code is correct. 
bool PlayGame(int Difficulty)
{
    PrintIntroduction(Difficulty);

    // Declare 3 number code
    int CodeA = rand() % Difficulty + Difficulty;
    int CodeB = rand() % Difficulty + Difficulty;
    int CodeC = rand() % Difficulty + Difficulty;

    int CodeSum = CodeA + CodeB + CodeC;
    int CodeProduct = CodeA * CodeB * CodeC;

    // Print sum and product to the terminal
    std::cout << std::endl;
    std::cout << "+ There are 3 numbers in the code";
    std::cout << "\n+ The codes add-up to: " << CodeSum;
    std::cout << "\n+ The codes multiply to give: " << CodeProduct << std::endl;

    // Store player guess
    int GuessA, GuessB, GuessC;
    std::cin >> GuessA >> GuessB >> GuessC;

    int GuessSum = GuessA + GuessB + GuessC;
    int GuessProduct = GuessA * GuessB * GuessC;

    // Check if the players guess is correct
    if (GuessSum == CodeSum && GuessProduct == CodeProduct)
    {
        std::cout << "\n*** Well done agent! You have gotten the onions! Keep Going! ***";;
        return true;
    }
    else
    {
        std::cout << "\n*** You entered the wrong code! The oger kind is depending on you! TRY AGAIN!! ***";
        return false;
    }

}

int main()
{
    srand(time(NULL)); //create new random sequence based on time of day

    int LevelDifficulty = 1;
    const int MaxDifficulty = 10;

    while (LevelDifficulty <= MaxDifficulty) // Loop game until all levels completed
    {
        bool bLevelComplete = PlayGame(LevelDifficulty);
        std::cin.clear(); // Clears any errors
        std::cin.ignore(); // Discards the buffer

        if (bLevelComplete)
        {
            ++LevelDifficulty; 
        }
        
    }   

    std::cout << "\n***Congratulations! You got all the onions!! Now get out of there and go save your kind!!! ***";
    return 0; //signlas the program ran correctly

}
